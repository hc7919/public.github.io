package kr.or.ddit.controller.member;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import kr.or.ddit.controller.member.service.IMemberService;
import kr.or.ddit.controller.member.service.MailSendService;
import kr.or.ddit.vo.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/member")
public class MemberController {

	@Inject
	private IMemberService service;
	@Inject
	private MailSendService mss;

	/**
	 * 
	 * @return
	 */
	@GetMapping("/register")
	public String memberRegisterForm() {
		log.debug("회원가입폼 :: ");
		return "commons/register";
	}

	/**
	 * 회원가입 페이지
	 * 
	 * @param memberVO 회원가입 form에서 name 속성 값, 이름,이메일,비밀번호
	 * @return 회원 등록 후 로그인 페이지 (메인페이지 생기면 자동 로그인 후 메인페이지로 이동예정)
	 */
	@PostMapping("/register")
	public ModelAndView memberRegister(MemberVO memberVO) {
	    log.debug("회원가입 post 페이지 ::: 멤버변수 : {}  ",memberVO);
		ModelAndView mav = new ModelAndView();
		String memberId = memberVO.getMemberId();
		String memberName = memberVO.getMemberName();
		String memberPw = memberVO.getMemberPw();
<<<<<<< .mine
		
		log.debug("memberId : {} \n Name : {} \n",memberId,memberName);
		log.debug("memberPw : {} ",memberPw);
		
		//중복가입확인로직.
//		MemberVO member= service.selectOne(memberId);
//		log.debug("회원정보 : {} ",member);
//		if (memberId.equals(member.getMemberId())) {
//			mav.addObject("msg", "이미 가입된 회원아이디 입니다.");
//			mav.setViewName("commons/register");
//			return mav;
//		}
||||||| .r297644
=======

		log.debug("memberId : {} \n Name : {} \n", memberId, memberName);
		log.debug("memberPw : {} ", memberPw);

		// 중복가입확인로직
		if (service.selectOne(memberId)!=null) {
			MemberVO member = service.selectOne(memberId);
			if (memberId.equals(member.getMemberId())) {
				mav.addObject("msg", "이미 가입된 회원아이디 입니다.");
				mav.setViewName("commons/register");
				return mav;
			}
		}
>>>>>>> .r297965
<<<<<<< .mine
		
		//이메일 전송후 autkey 생성한걸 가져옴 
		String authKey= mss.sendAuthMail(memberId);
		log.debug("이메일인증키 {} ",authKey);
||||||| .r297644
=======

		String authKey = mss.sendAuthMail(memberId);
		log.debug("이메일인증키 {} ", authKey);
>>>>>>> .r297965
		memberVO.setMemberToken(authKey);
		service.memberRegister(memberVO);
		log.debug("회원가입 완료 아이디: {} , 토큰: {} ", memberId, authKey);
		mav.setViewName("redirect:/login");

		return mav;
	}

	/**
	 * 인증메일에 쿼리스트링을 보낸후 쿼리스트링에서 memberId 와 Token을 가져옴 가져온 정보로 state컬럼을 업데이트 시켜줌 인증메일
	 * 쿼리스트링 >> /member/signUpConfirm?email={memberId}&authKey={memberToken}
	 * 
	 * @param email   memberId
	 * @param authKey memberToken 컬럼활용
	 * @return 미구상 ModelAndView "msg" 인증성공메시지, setViewName은 어디로 리턴할지 안정함
	 */
	@GetMapping("/signUpConfirm")
	public ModelAndView memberRegComfirm(@RequestParam String email, String authKey) {
		ModelAndView mav = new ModelAndView();
		log.debug(" url memberId :: {} ", email);

		// email 로 meberid 받은후 select 쿼리 한명의 정보 불러옴.
		// memberVO객체 생성후 넣어줌
		MemberVO memberVO = service.selectOne(email);

		// token 과 authkey 비교
		log.debug("aukey ::{} , memberToken ::{} ", authKey, memberVO.getMemberToken());
		if (authKey.equals(memberVO.getMemberToken())) {
			// 조건문 걸어서 같으면 membervo 객체의 상태값 바꿔줘서 update 쿼리실행
			mav.addObject("msg", "인증에 성공했습니다.<br> 로그인을 해주세요");
			// 상태값 미인증 0 인증회원1 탈퇴 9
			String memberState = memberVO.getMemberState();
			log.debug("memberState ::  {} ", memberState);
			// member 상태가 이미 인증상태이거나 다른상태일때만 업데이트
			if (!memberState.equals("1")) {
				memberVO.setMemberState("1");
				service.updateState(memberVO);
			} else {
				mav.addObject("msg", "이미 인증하였거나, 탈퇴회원입니다. ");
			}
			mav.setViewName("login");
			return mav;
		} else {
			mav.addObject("msg", "인증번호가 맞지않습니다.<br> 다시 시도해 주십시오. ");
		}

		mav.addObject("memberId", email);
		// setviewname
		mav.setViewName("login");
		return mav;
	}
	


}

<%@ page language="java" contentType="text/html; charset=UTF-8"%>
<!-- 피커 -->
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css"
/>
<link
  rel="stylesheet"
  type="text/css"
  href="https://npmcdn.com/flatpickr/dist/themes/dark.css"
/>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://npmcdn.com/flatpickr/dist/l10n/ko.js"></script>

<!-- 풀캘린더 -->
<link
    href="https://cdn.jsdelivr.net/npm/fullcalendar@5.8.0/main.min.css"
    rel="stylesheet" />

<!-- 티피 -->
<link rel="stylesheet"
    href="https://unpkg.com/tippy.js@6/animations/scale.css" />
<script src="https://unpkg.com/@popperjs/core@2/dist/umd/popper.min.js"></script>
<script src="https://unpkg.com/tippy.js@6/dist/tippy-bundle.umd.js"></script>

<style>
  .parent {
    width: 90%;
    margin: 10px auto;
    display: flex;
    flex-direction: row;
    overflow: auto;
    white-space: nowrap;
  }
  .container {
    min-width: 200px;
    min-height: 400px;
    height: auto;
    margin: 10px;
    padding: 10px;
    background-color: #b5c1dc57;
    border-radius: 8px;
  }
</style>
<!-- content-page div가 있어야 내용이 출력된다. -->
<div class="content-page">
  <div class="content">
    <!-- Start Content-->
    <div class="container-fluid">
      <!-- start page title -->
      <div class="row">
        <div class="col-12">
          <div>
          
            <ul class="nav nav-tabs nav-bordered nav-justified">
            
                <li class="nav-item">
                    <a href="#home-b2" onclick="pageTap('home')" data-bs-toggle="tab" aria-expanded="false" class="nav-link active">
                        홈
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#profile-b2" onclick="pageTap('workList')" data-bs-toggle="tab" aria-expanded="true" class="nav-link">
                        목록
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#messages-b2" onclick="pageTap('kanban')" data-bs-toggle="tab" aria-expanded="false" class="nav-link">
                        칸반보드
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#messages-b2" onclick="pageTap('calendar')" data-bs-toggle="tab" aria-expanded="false" class="nav-link">
                        캘린더
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#messages-b2" onclick="pageTap('dataRoom')" data-bs-toggle="tab" aria-expanded="false" class="nav-link">
                        자료실
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#messages-b2" onclick="pageTap('gdocs')" data-bs-toggle="tab" aria-expanded="false" class="nav-link">
                        공유문서 작성
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#messages-b2" onclick="pageTap('notice')" data-bs-toggle="tab" aria-expanded="false" class="nav-link">
                        통계자료
                    </a>
                </li>
                <li class="nav-item">
                    <a href="#messages-b2" onclick="pageTap('notice')" data-bs-toggle="tab" aria-expanded="false" class="nav-link">
                        공지사항
                    </a>
                </li>
            </ul>
          </div>
        </div>
      </div>
      <!-- end page title -->

      <!-- 작업추가 -->
      <button
        type="button"
        class="btn btn-primary width-lg waves-effect waves-light"
        onclick="insertModalOpen()"
      >
        일감 생성하기
      </button>
      <button
        type="button"
        class="btn btn-primary width-lg waves-effect waves-light"
        onclick="categoryModalOpen()"
      >
        <i class="fas fa-plus"></i> 카테고리 생성하기
      </button>
      <button
        type="button"
        class="btn btn-primary width-lg waves-effect waves-light"
        onclick="modeChange('project')"
      >
        칸반보드 - 프로젝트
      </button>
      <button
        type="button"
        class="btn btn-primary width-lg waves-effect waves-light"
        onclick="modeChange('personal')"
      >
        칸반보드 - 개인
      </button>
      <!-- 작업추가 end -->
      <div class="row justify-content-center spa">
        <!-- end col-->
      </div>
      <!-- end row -->
    </div>
    <!-- container -->
  </div>
  <!-- content -->
</div>

<!-- 모달들 -->
<!-- Add New Event MODAL -->
<div class="modal fade" id="event-modal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header py-3 px-4 border-bottom-0 d-block">
        <button
          type="button"
          class="btn-close float-end"
          data-bs-dismiss="modal"
          aria-label="Close"
          onclick="insertModalClose()"
        ></button>
        <h5 class="modal-title" id="modal-title">작업 추가</h5>
      </div>
      <div class="modal-body px-4 pb-4 pt-0">
        <form
          class="needs-validation"
          name="event-form"
          id="form-event"
          novalidate
        >
          <div class="row">
            <div class="col-12">
              <div class="mb-3">
                <label class="form-label">Work Title</label>
                <input
                  class="form-control"
                  placeholder="작업명을 입력해주세요."
                  type="text"
                  name="title"
                  id="event-title"
                  required
                />
                <div class="invalid-feedback">작업 입력은 필수입니다.</div>
              </div>
              <div class="mb-3">
                <label class="form-label">Content</label>
                <input
                  class="form-control"
                  placeholder="내용을 입력해주세요."
                  type="text"
                  name="worker"
                  id="event-content"
                  required
                />
                <div class="invalid-feedback">내용을 입력해주세요.</div>
              </div>
            </div>
            <div class="col-12">
              <div class="mb-3">
                <label class="form-label">Category</label>
                <select
                  class="form-select"
                  name="category"
                  id="event-select-category"
                  required
                >
                  <option value="active" selected>미설정</option>
                  <option value="warning">DB</option>
                  <option value="info">FRONT</option>
                  <option value="success">BACK</option>
                </select>
                <div class="invalid-feedback">
                  Please select a valid event category
                </div>
              </div>
              <div class="mb-3">
                <label class="form-label">Worker</label>
                <select
                  class="form-select"
                  name="category"
                  id="event-worker"
                  required
                >
                  <option value="미배정" selected>미배정</option>
                  <option value="김진호">김진호</option>
                  <option value="허나훔">허나훔</option>
                  <option value="채진영">채진영</option>
                  <option value="송서영">송서영</option>
                  <option value="오지형">오지형</option>
                  <option value="배지영">배지영</option>
                </select>
                <div class="invalid-feedback">
                  Please select a valid event Worker
                </div>
              </div>
              <div class="mb-3">
                <label class="form-label">Date</label>

                <div style="display: flex; justify-content: space-around">
                  <div class="col-6">
                    <label class="form-label" for="birth">시작일</label>
                    <input
                      class="form-control"
                      id="birth"
                      pattern="\d{4}-\d{2}-\d{2}"
                      placeholder=""
                      required
                      th:field="*{birth2}"
                      type="text"
                      value=""
                    />
                  </div>
                  <div class="col-6">
                    <label class="form-label" for="birth2">종료일</label>
                    <input
                      class="form-control"
                      id="birth2"
                      pattern="\d{4}-\d{2}-\d{2}"
                      placeholder=""
                      required
                      th:field="*{birth2}"
                      type="text"
                      value=""
                    />
                  </div>
                </div>

                <div class="invalid-feedback">
                  Please select a valid event day
                </div>
              </div>
              <div class="mb-3">
                <label class="form-label">File</label>
                <input
                  class="form-control"
                  id="event-file"
                  name="uploadFileAjax"
                  type="file"
                  multiple
                />
              </div>
            </div>
          </div>
          <div class="row mt-2">
            <div class="col-md-6 col-4">
              <button type="button" class="btn btn-danger" id="btn-reset-event">
                Reset
              </button>
            </div>
            <div class="col-md-6 col-8 text-end">
              <button
                type="button"
                class="btn btn-light me-1"
                id="btnModalClose"
                data-bs-dismiss="modal"
              >
                Close
              </button>
              <button type="button" class="btn btn-success" id="btn-save-event">
                Save
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
    <!-- end modal-content-->
  </div>
  <!-- end modal dialog-->
</div>
<!-- end modal-->

<!-- Category 추가 모달 -->
<div
  id="info-alert-modal"
  class="modal fade"
  tabindex="-1"
  role="dialog"
  aria-hidden="true"
>
  <div class="modal-dialog modal-sm">
    <div class="modal-content">
      <div class="modal-body p-4">
        <div class="text-center">
          <i class="dripicons-information h1 text-info"></i>
          <h4 class="mt-2">Add Category</h4>
          <p class="mt-3">
            <input
              class="form-control"
              id="category-name"
              type="text"
              placeholder="Enter Category Name."
              required
            />
          </p>
          <!-- 색상 선택 드롭박스 -->
          <div class="dropdown" style="margin: 10px">
            <input type="hidden" id="dropBox-colorCode" value="#ECF2F5" />
            <button
              class="btn btn-light dropdown-toggle"
              type="button"
              id="dropdownMenuButton"
              data-bs-toggle="dropdown"
              aria-haspopup="true"
              aria-expanded="false"
            >
              <font id="dropBox-name">색상</font
              ><i class="mdi mdi-chevron-down"></i>
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
              <a class="dropdown-item" href="javascript: selectColor('light')"
                ><font class="text-dark color-light">색상</font></a
              >
              <a class="dropdown-item" href="javascript: selectColor('primary')"
                ><font class="text-primary color-primary">파랑</font></a
              >
              <a class="dropdown-item" href="javascript: selectColor('success')"
                ><font class="text-success color-success">연두</font></a
              >
              <a class="dropdown-item" href="javascript: selectColor('info')"
                ><font class="text-info color-info">하늘</font></a
              >
              <a class="dropdown-item" href="javascript: selectColor('warning')"
                ><font class="text-warning color-warning">주황</font></a
              >
              <a class="dropdown-item" href="javascript: selectColor('danger')"
                ><font class="text-danger color-danger">빨강</font></a
              >
              <a class="dropdown-item" href="javascript: selectColor('dark')"
                ><font class="text-dark color-dark">검정</font></a
              >
              <a class="dropdown-item" href="javascript: selectColor('purple')"
                ><font class="text-purple color-purple">보라</font></a
              >
              <a class="dropdown-item" href="javascript: selectColor('pink')"
                ><font class="text-pink color-pink">분홍</font></a
              >
              <a
                class="dropdown-item"
                href="javascript: selectColor('secondary')"
                ><font class="text-secondary color-secondary">회색</font></a
              >
            </div>
          </div>
          <!-- 드롭박스 끝 -->
          <button
            id="category-add"
            onclick="categoryModalInsert()"
            type="button"
            class="btn btn-primary waves-effect waves-light"
            data-bs-dismiss="modal"
          >
            추가
          </button>
          <button
            id="category-cancel"
            onclick="categoryModalClose()"
            type="button"
            class="btn btn-danger waves-effect waves-light"
            data-bs-dismiss="modal"
          >
            취소
          </button>
        </div>
      </div>
    </div>
    <!-- /.modal-content -->
  </div>
  <!-- /.modal-dialog -->
</div>
<!-- /.modal -->

<!-- 카테고리 수정 모달 -->
<div
  id="category-update-modal"
  class="modal fade"
  tabindex="-1"
  role="dialog"
  aria-hidden="true"
>
  <div class="modal-dialog modal-sm">
    <div class="modal-content">
      <div class="modal-body p-4">
        <div class="text-center">
          <i class="dripicons-information h1 text-info"></i>
          <h4 class="mt-2">Update Category</h4>
          <p class="mt-3">
            <input
              class="form-control"
              id="category-name-update"
              type="text"
              placeholder="Enter Category Name."
              required
            />
          </p>
          <!-- 색상 선택 드롭박스 -->
          <div class="dropdown" style="margin: 10px">
            <input
              type="hidden"
              id="dropBox-colorCode-update"
              value="#ECF2F5"
            />
            <!-- 수정버튼 누르면 여기에 피케이값 저장됨 -->
            <input type="hidden" id="dropBox-twCategoryNo-update" value="" />
            <button
              class="btn btn-light dropdown-toggle"
              type="button"
              id="dropdownMenuButton-update"
              data-bs-toggle="dropdown"
              aria-haspopup="true"
              aria-expanded="false"
            >
              <font id="dropBox-name-update">색상</font
              ><i class="mdi mdi-chevron-down"></i>
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
              <a
                class="dropdown-item"
                href="javascript: selectColorUpdate('light')"
                ><font class="text-dark updateColor-light">색상</font></a
              >
              <a
                class="dropdown-item"
                href="javascript: selectColorUpdate('primary')"
                ><font class="text-primary updateColor-primary">파랑</font></a
              >
              <a
                class="dropdown-item"
                href="javascript: selectColorUpdate('success')"
                ><font class="text-success updateColor-success">연두</font></a
              >
              <a
                class="dropdown-item"
                href="javascript: selectColorUpdate('info')"
                ><font class="text-info updateColor-info">하늘</font></a
              >
              <a
                class="dropdown-item"
                href="javascript: selectColorUpdate('warning')"
                ><font class="text-warning updateColor-warning">주황</font></a
              >
              <a
                class="dropdown-item"
                href="javascript: selectColorUpdate('danger')"
                ><font class="text-danger updateColor-danger">빨강</font></a
              >
              <a
                class="dropdown-item"
                href="javascript: selectColorUpdate('dark')"
                ><font class="text-dark updateColor-dark">검정</font></a
              >
              <a
                class="dropdown-item"
                href="javascript: selectColorUpdate('purple')"
                ><font class="text-purple updateColor-purple">보라</font></a
              >
              <a
                class="dropdown-item"
                href="javascript: selectColorUpdate('pink')"
                ><font class="text-pink updateColor-pink">분홍</font></a
              >
              <a
                class="dropdown-item"
                href="javascript: selectColorUpdate('secondary')"
                ><font class="text-secondary updateColor-secondary"
                  >회색</font
                ></a
              >
            </div>
          </div>
          <!-- 드롭박스 끝 -->
          <button
            id="category-update"
            type="button"
            onclick="categoryUpdate()"
            class="btn btn-primary waves-effect waves-light"
            data-bs-dismiss="modal"
          >
            수정
          </button>
          <button
            id="category-update-cancel"
            onclick="categoryUpdateModalClose()"
            type="button"
            class="btn btn-danger waves-effect waves-light"
            data-bs-dismiss="modal"
          >
            취소
          </button>
        </div>
      </div>
    </div>
    <!-- /.modal-content -->
  </div>
  <!-- /.modal-dialog -->
</div>
<!-- /.modal -->

<!-- Detail MODAL -->
<div class="modal fade" id="detail-modal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header py-3 px-4 border-bottom-0 d-block">
        <button
          type="button"
          class="btn-close float-end"
          data-bs-dismiss="modal"
          aria-label="Close"
          onclick="detailModalClose()"
        ></button>
        <h5 class="modal-title" id="modal-title">작업 수정</h5>
      </div>
      <div class="modal-body px-4 pb-4 pt-0">
        <form
          class="needs-validation"
          name="event-form"
          id="form-event"
          novalidate
        >
          <div class="row">
            <div class="col-12">
              <div class="mb-3">
                <label class="form-label">Work Title</label>
                <input type="hidden" id="topWorkNo-detail" value=""/>
                <input
                  class="form-control"
                  placeholder="작업명을 입력해주세요."
                  type="text"
                  name="title"
                  id="detail-title"
                  required
                />
                <div class="invalid-feedback">작업 입력은 필수입니다.</div>
              </div>
                <label class="form-label">Content</label>
                <input
                  class="form-control"
                  placeholder="내용을 입력해주세요."
                  type="text"
                  name="worker"
                  id="detail-content"
                  required
                />
                <div class="invalid-feedback">내용을 입력해주세요.</div>
              </div>
            </div>
            <div class="col-12">
              <div class="mb-3">
                <label class="form-label">Category</label>
                <select
                  class="form-select"
                  name="category"
                  id="detail-select-category"
                  required
                >
                  <option value="active" selected>미설정</option>
                  <option value="warning">DB</option>
                  <option value="info">FRONT</option>
                  <option value="success">BACK</option>
                </select>
                <div class="invalid-feedback">
                  Please select a valid event category
                </div>
              </div>
              <div class="mb-3">
                <label class="form-label">Worker</label>
                <select
                  class="form-select"
                  name="category"
                  id="event-worker"
                  required
                >
                  <option value="미배정" selected>미배정</option>
                  <option value="id-1">아이디1</option>
                  <option value="id-2">아이디2</option>
                  <option value="id-3">아이디3</option>
                </select>
                <div class="invalid-feedback">
                  Please select a valid event Worker
                </div>
              </div>
              <div class="mb-3">
                <label class="form-label">Date</label>

                <div style="display: flex; justify-content: space-around">
                  <div class="col-6">
                    <label class="form-label" for="birth">시작일</label>
                    <input
                      class="form-control"
                      id="topWorkStart-detail"
                      pattern="\d{4}-\d{2}-\d{2}"
                      placeholder=""
                      required
                      th:field="*{topWorkStart-detail}"
                      type="text"
                      value=""
                    />
                  </div>
                  <div class="col-6">
                    <label class="form-label" for="birth2">종료일</label>
                    <input
                      class="form-control"
                      id="topWorkEnd-detail"
                      pattern="\d{4}-\d{2}-\d{2}"
                      placeholder=""
                      required
                      th:field="*{topWorkEnd-detail}"
                      type="text"
                      value=""
                    />
                  </div>
                </div>

                <div class="invalid-feedback">
                  Please select a valid event day
                </div>
              </div>
              <div class="mb-3">
                <label class="form-label">File</label>
                <input
                  class="form-control"
                  id="event-file"
                  type="file"
                  multiple
                />
              </div>
            </div>
          </div>
          <div class="row mt-2">
            <div class="col-md-6 col-4">
              <button type="button" class="btn btn-danger" id="btn-delete-detail" onclick="topWorkDelete()">
                Delete
              </button>
            </div>
            <div class="col-md-6 col-8 text-end">
              <button
                type="button"
                class="btn btn-light me-1"
                id="btnModalClose"
                data-bs-dismiss="modal"
                onclick="detailModalClose()"
              >
                Close
              </button>
              <button type="button" class="btn btn-success" id="btn-save-detail" onclick="topWorkUpdate()">
                Update
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
    <!-- end modal-content-->
  </div>
  <!-- end modal dialog-->
</div>
<!-- end modal-->

<!-- 템플릿거 -->
<script src="${pageContext.request.contextPath }/resources/dist/assets/js/vendor.min.js"></script>
<script src="${pageContext.request.contextPath }/resources/dist/assets/js/app.min.js"></script>
<!-- 드래그 -->
<!-- <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>

<!-- axios -->
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>


<!-- calendar.jsp 관련 -->
<!-- 풀캘린더 -->
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.8.0/main.min.js"></script>
<!-- fullcalendar 언어 CDN -->
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.8.0/locales-all.min.js"></script>
<!-- 풀캘린더 데이트 포맷 -->
<script class="cssdesk" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.11.0/moment.min.js" type="text/javascript"></script> 


<script>

var beforeCategory = "";

const URLSearch = new URLSearchParams(location.search);
var proNo = "";
var currentTap_PH_K = "";

changeTitle();
pageTap('home');
//kanbanRender();


var mode = "";

function modeChange(arg) {
    mode = arg;
    //console.log(mode);
}

var COLORS = {};
COLORS.LIGHT = "#ECF2F5";
COLORS.PRIMARY = "#338CD4";
COLORS.SUCCESS = "#78C350";
COLORS.INFO = "#45BBE0";
COLORS.WARNING = "#FF9800";
COLORS.DANGER = "#F7531E";
COLORS.DARK = "#333A46";
COLORS.PURPLE = "#8892D6";
COLORS.PINK = "#F06292";
COLORS.SECONDARY = "#6C757D";

updateSelectBar();
function updateSelectBar() {
    const selectBar = document.querySelector("#event-select-category");
    const selectBarDetail = document.querySelector("#detail-select-category");
    //proNo를 받아와야하는데..일단 전체 불러오기로 하자
    axios
      .post("/kanban/categoryList?proNo=" + proNo)
      .then((res) => {
            const selectOptions = res.data;
            //console.log(selectOptions);
            let text = "";
            let count = 1;
            for (item of selectOptions) {
                
                if (count == 1) {
                    text += `<option value="\${item.twCategoryNo}" selected>\${item.twCategoryName}</option>`;
                } else {
                    text += `<option value="\${item.twCategoryNo}">\${item.twCategoryName}</option>`;
                }
                
                count ++;
            }
            
            selectBar.innerHTML = text;
            selectBarDetail.innerHTML = text;
      });
}


function detailOpen(topWorkNo) {
    //console.log("탑워크 피케이 : ", topWorkNo);
    const obj = {
      topWorkNo,
    }
    
    axios
      .post("/kanban/topWorkDetail", obj)
      .then((res) => {
            //console.log(res.data);
            detailModalOpen(res.data);
      });
}

function topWorkUpdate() {
    const obj = {};
    obj.topWorkNo = document.querySelector("#topWorkNo-detail").value;
    obj.topWorkTitle = document.querySelector("#detail-title").value;
    obj.topWorkContent = document.querySelector("#detail-content").value;
    obj.topWorkStart = document.querySelector("#topWorkStart-detail").value.replace(" ", "T");
    obj.topWorkEnd = document.querySelector("#topWorkEnd-detail").value.replace(" ", "T");
    obj.twCategoryNo = document.querySelector("#detail-select-category").value;
    
    //console.log(obj);
    
    axios
      .post("/kanban/topWorkUpdate", obj)
      .then((res) => {
          //console.log(res);
          //디테일에서 업데이트 성공 -> 모달 닫고 렌더링
          detailModalClose();
          kanbanRender();
      });
}

function topWorkDelete() {
    const obj = {};
    obj.topWorkNo = document.querySelector("#topWorkNo-detail").value;
    
    if (!confirm("정말 삭제하시겠습니까?")) {
        return;
    }
    //console.log(obj);
    axios
      .post("/kanban/topWorkDelete", obj)
      .then((res) => {
          //console.log(res);
          //디테일에서 삭제 성공 -> 모달 닫고 렌더링
          detailModalClose();
          //kanbanRender();
          pageTap(currentTap_PH_K);
      });
    
}

function detailModalOpen(topWorkVO) {
  //console.log(topWorkVO);
  //파라미터로 받은 객체로 값 채우기
  document.querySelector("#topWorkNo-detail").value = topWorkVO.topWorkNo;
  document.querySelector("#detail-title").value = topWorkVO.topWorkTitle;
  document.querySelector("#detail-content").value = topWorkVO.topWorkContent;
  document.querySelector("#topWorkStart-detail").value = topWorkVO.topWorkStart.replace("T", " ");
  document.querySelector("#topWorkEnd-detail").value = topWorkVO.topWorkEnd.replace("T", " ");
  document.querySelector("#detail-select-category").value = topWorkVO.twCategoryNo;
  
  
  document.querySelector("#detail-modal").classList.add("show");
  document.querySelector("#detail-modal").style.display = "block";
}

function detailModalClose() {
  //디테일모달같은 경우엔 굳이 값을 비워줄 필요가 없다.
  document.querySelector("#detail-modal").classList.remove("show");
  document.querySelector("#detail-modal").style.display = "none";
}
function selectColor(color) {
  //console.log(color);
  document.querySelector(
    "#dropdownMenuButton"
  ).className = `btn btn-\${color} dropdown-toggle`;
  const selected = `.color-\${color}`;
  const fontColor = document.querySelector(selected).innerText;
  document.querySelector("#dropBox-name").innerText = fontColor;

  //카테고리 추가시 색상코드 같이 보내기주기위한 색상값 저장
  //console.log(color.toUpperCase());
  let saveColor = "";
  if (color.toUpperCase() == "LIGHT") saveColor = COLORS.LIGHT;
  if (color.toUpperCase() == "PRIMARY") saveColor = COLORS.PRIMARY;
  if (color.toUpperCase() == "SUCCESS") saveColor = COLORS.SUCCESS;
  if (color.toUpperCase() == "INFO") saveColor = COLORS.INFO;
  if (color.toUpperCase() == "WARNING") saveColor = COLORS.WARNING;
  if (color.toUpperCase() == "DANGER") saveColor = COLORS.DANGER;
  if (color.toUpperCase() == "DARK") saveColor = COLORS.DARK;
  if (color.toUpperCase() == "PURPLE") saveColor = COLORS.PURPLE;
  if (color.toUpperCase() == "PINK") saveColor = COLORS.PINK;
  if (color.toUpperCase() == "SECONDARY") saveColor = COLORS.SECONDARY;

  document.querySelector("#dropBox-colorCode").value = saveColor;
  //console.log(document.querySelector("#dropBox-colorCode"));
}

function selectColorUpdate(color) {
  //console.log(color);
  document.querySelector(
    "#dropdownMenuButton-update"
  ).className = `btn btn-\${color} dropdown-toggle`;
  const selected = `.updateColor-\${color}`;
  const fontColor = document.querySelector(selected).innerText;
  document.querySelector("#dropBox-name-update").innerText = fontColor;

  //카테고리 추가시 색상코드 같이 보내기주기위한 색상값 저장
  //console.log(color.toUpperCase());
  let saveColor = "";
  if (color.toUpperCase() == "LIGHT") saveColor = COLORS.LIGHT;
  if (color.toUpperCase() == "PRIMARY") saveColor = COLORS.PRIMARY;
  if (color.toUpperCase() == "SUCCESS") saveColor = COLORS.SUCCESS;
  if (color.toUpperCase() == "INFO") saveColor = COLORS.INFO;
  if (color.toUpperCase() == "WARNING") saveColor = COLORS.WARNING;
  if (color.toUpperCase() == "DANGER") saveColor = COLORS.DANGER;
  if (color.toUpperCase() == "DARK") saveColor = COLORS.DARK;
  if (color.toUpperCase() == "PURPLE") saveColor = COLORS.PURPLE;
  if (color.toUpperCase() == "PINK") saveColor = COLORS.PINK;
  if (color.toUpperCase() == "SECONDARY") saveColor = COLORS.SECONDARY;

  document.querySelector("#dropBox-colorCode-update").value = saveColor;
  //console.log(document.querySelector("#dropBox-colorCode"));
}

function categoryUpdatePK(twCategoryNo) {
  //수정버튼 클릭시 인풋히든에 pk 세팅
  //console.log("피케이", twCategoryNo);
  document.querySelector("#dropBox-twCategoryNo-update").value = twCategoryNo;
  
}

function categoryUpdate() {
    
  //수정하기 버튼 클릭시 세팅 및 전송
  const twCategoryName = document.querySelector(
    "#category-name-update"
  ).value;
  console.log("twCategoryName",twCategoryName);
  const twCategoryColor = document.querySelector(
    "#dropBox-colorCode-update"
  ).value;
  const twCategoryNo = document.querySelector(
    "#dropBox-twCategoryNo-update"
  ).value;
  //업데이트 객체 세팅
  const obj = {
    twCategoryName,
    twCategoryColor,
    twCategoryNo,
  };
  
  // 오지형  카테고리 이름 수정시 폴더 이름 변경 
  console.log("카테고리 이전이름 :", beforeCategory);
  console.log("카테고리 수정이름 :", twCategoryName);
  console.log("프로젝트 번호 : ", proNo);
  const fileobj_O = {
          "beforeCategory" : beforeCategory,
          "updateCategory" : twCategoryName,
          "proNo" : proNo
  } 
  
  $.ajax({
      url : "/updateCategoryFileLocation",
      type : "POST",
      data : fileobj_O,
      success : function(result){
          //console.log(result);
      }
  }); // end of ajax
  
  //console.log(obj);
  //업데이트 전송
  axios.post("/kanban/categoryUpdate", obj).then((res) => {
    //console.log("카테고리 업데이트 성공");
    kanbanRender();
    categoryUpdateModalClose();
  });
}

//우선 비동기로 목록을 불러와서 각각의 영역에 넣어줘야함
//DB 연동해서 만든 후에 카테고리를 추가하는 기능을 만들어야함

//피커
var fp = flatpickr(document.getElementById("birth"), {
//'monthSelectorType' : 'static',
locale: "ko",
enableTime: "true",
onValueUpdate: () => {
  //console.log("업데이트");
},
onDayCreate: () => {
  //console.log("크리에이트");
},
});
var fp2 = flatpickr(document.getElementById("birth2"), {
//'monthSelectorType' : 'static',
locale: "ko",
enableTime: "true",
onValueUpdate: () => {
  //console.log("업데이트");
},
onDayCreate: () => {
  //console.log("크리에이트");
},
});
var fp3 = flatpickr(document.getElementById("topWorkStart-detail"), {
//'monthSelectorType' : 'static',
locale: "ko",
enableTime: "true",
onValueUpdate: () => {
  //console.log("업데이트");
},
onDayCreate: () => {
  //console.log("크리에이트");
},
});
var fp4 = flatpickr(document.getElementById("topWorkEnd-detail"), {
//'monthSelectorType' : 'static',
locale: "ko",
enableTime: "true",
onValueUpdate: () => {
  //console.log("업데이트");
},
onDayCreate: () => {
  //console.log("크리에이트");
},
});
//인서트용 모달
var btnInsertModalClose = document.querySelector("#btnModalClose");
var btnInsertModalReset = document.querySelector("#btn-reset-event");
var btnInsertModalSave = document.querySelector("#btn-save-event");

var insertModalOpen = (from, data) => {
//console.log(from, data);
if (from == "캘린더") {
    const defaultTime = "T10:00";
    
    const topWorkStart = data.startStr + defaultTime;
    const topWorkEnd = data.endStr + defaultTime;
    //console.log(topWorkStart, topWorkEnd);
    
    document.querySelector("#birth").value = topWorkStart.replace("T", " ");
    document.querySelector("#birth2").value = topWorkEnd.replace("T", " ");
}
//console.log("클래스리슽트?", document.querySelector("#event-modal"));
document.querySelector("#event-modal").classList.add("show");
document.querySelector("#event-modal").style.display = "block";
};

var insertModalClose = () => {
//닫기 전 값 초기화해주기 필요
document.querySelector("#event-modal").classList.remove("show");
document.querySelector("#event-modal").style.display = "none";
//닫을때 입력된 데이터 날려버리기
insertModalReset();
};

var insertModalReset = () => {
document.querySelector("#event-title").value = "";
document.querySelector("#event-content").value = "";
//document.querySelector("#event-select-category").value = "";
document.querySelector("#birth").value = "";
document.querySelector("#birth2").value = "";
document.querySelector("#event-worker").value = "미배정";
document.querySelector("#event-file").value = "";
};

btnInsertModalReset.addEventListener("click", () => {
insertModalReset();
});

btnInsertModalClose.addEventListener("click", () => {
insertModalClose();
});

btnInsertModalSave.addEventListener("click", (event) => {

// 일감생성하기 시 처리되는 파일  01/02 오지형
var formData_O = new FormData();
//const inputFile = document.querySelector("#event-file");
var inputFile = $("input[name='uploadFileAjax']");
//console.log("inputFile : ", inputFile); // <input type="file"> tag
var files = inputFile[0].files;
//console.log("files : ",files);
for(var i = 0; i < files.length; i++){
    formData_O.append("uploadFile",files[i]);   
 }
const twCategoryName = $("#event-select-category option:selected").text();
const topWorkTitle_O = document.querySelector("#event-title").value;
//console.log("twCategoryName",twCategoryName);
let jsonData = JSON.stringify({ projectId: proNo , fileLocation :twCategoryName, topWorkTitle : topWorkTitle_O });
console.log("jsonData :", jsonData);
formData_O.append("jsonData", jsonData);    

$.ajax({
    url : '/uploadAjaxAction',
    processData : false,
    contentType : false,
    data : formData_O,
    type : 'POST',
    dataType : 'json',
    success : function(result){
        //console.log("origin result",result);
    }
}); // end of ajax */

const topWorkTitle = document.querySelector("#event-title").value;
const topWorkContent = document.querySelector("#event-content").value;
const twCategoryNo = document.querySelector("#event-select-category").value;
const topWorkStart = document
  .querySelector("#birth")
  .value.replace(" ", "T");
const topWorkEnd = document
  .querySelector("#birth2")
  .value.replace(" ", "T");
const memberId = document.querySelector("#event-worker").value;
//console.log("워커 : " + memId); 
const obj = {
  topWorkTitle,
  topWorkContent,
  twCategoryNo,
  topWorkStart,
  topWorkEnd,
  proNo,
  //topWorkState는 기본 0 -> 카테고리 이동시?
  //topWorkLike도 기본값 0
  //topWorkFile도 기본값 null인데 마이바티스에서 에러나니깐 서비스단에서 '0'으로 넣어줌.
  //topWorkProgress도 기본값 0
};
//console.log("작업인서트될놈: ", obj);
//axios는 제이슨 직렬화 하지않고 그냥 보내야함.
//헤더 설정은 별도로 필요 없다.
//const json = JSON.stringify(obj);
//const config = {"Content-Type" : "application/json"};
//console.log(obj);

let topWorkNo = "";

axios.post("/kanban/insert", obj)
.then((response) => {
  //console.log("new topWorkNo : ", response.data);
  topWorkNo = response.data;
  //kanbanRender();
  pageTap(currentTap_PH_K); //탭을 다시 불러오는 식으로 리렌더링..
  insertModalClose();
})
.then((res) => { //인서트 됐으면 관계테이블에 인서트
    if (memberId == "미배정") {
        return;
    }
    
    const topWorkRelationVO = {};
    topWorkRelationVO.memberId = memberId;
    topWorkRelationVO.topWorkNo = topWorkNo;
    
    axios
      .post("/kanban/topWorkRelationInsert", topWorkRelationVO)
      .then((res) => {
        //성공!!! 근데 무조건 추가할게 아니라 조건문으로 담당자 배정 했을때만 인서트해야함
          //console.log(res); 
      });
    
});
});

//카테고리 모달(인서트)
var btnCategoryModalCansel = document.querySelector("#category-cancel");

var categoryModalOpen = () => {
document.querySelector("#info-alert-modal").classList.add("show");
document.querySelector("#info-alert-modal").style.display = "block";
};

var categoryModalClose = () => {
document.querySelector("#info-alert-modal").classList.remove("show");
document.querySelector("#info-alert-modal").style.display = "none";
};
//카테고리 모달(업데이트)
var categoryUpdateModalOpen = (evnet) => {
//console.dir(event.target.previousSibling);
document.querySelector("#category-name-update").value =
  event.target.previousSibling.data;
console.log("현제 카테고리 이름 : ",event.target.previousSibling.data); // 현제 값 찍기
beforeCategory = event.target.previousSibling.data; // 수정전 카테고리 저장 
document.querySelector("#category-update-modal").classList.add("show");
document.querySelector("#category-update-modal").style.display = "block";
};
var categoryUpdateModalClose = () => {
document.querySelector("#category-name-update").value = "";
document.querySelector("#category-update-modal").classList.remove("show");
document.querySelector("#category-update-modal").style.display = "none";
};

var categoryModalInsert = () => {
	  const twCategoryName = document.querySelector("#category-name").value;
	  const twCategoryColor = document.querySelector("#dropBox-colorCode").value;
	  //console.log(twCategoryName);
	  //console.log("인서트시 컬러", twCategoryColor);

	  const obj = {
	    twCategoryName,
	    twCategoryColor,
	    proNo,
	  };

	  axios.post("/kanban/categoryInsert", obj).then((response) => {
	    //console.log(response);
	    kanbanRender();
	    categoryModalClose();
	    updateSelectBar();
	  });
	};


function changeTitle() {
	const SearchProNo = URLSearch.get("proNo");
	
	if ( SearchProNo == null) {
		return;
	} 
	
	proNo = SearchProNo;
	document.title = "프로젝트 " + proNo;
}

function pageTap(arg) {
	//console.log(arg);
	if (arg == "kanban") {
		currentTap_PH_K = "kanban";
		//kanbanRender();
		$(".spa").load("/project/kanban_spa");
	}
	
	if (arg == "home") {
		currentTap_PH_K = "home";
		$(".spa").load("/project/home_spa");
	}
	
	if (arg == "calendar") {
		currentTap_PH_K = "calendar";
		$(".spa").load("/project/calendar_spa"); //spa 클래스에 jsp를 로드해준다!
	}
	
	if (arg == "dataRoom") {
		currentTap_PH_K = "dataRoom";
		$(".spa").load("/project/dataRoom_spa"); //spa 클래스에 jsp를 로드해준다!
	}
	if (arg == "gdocs") {
		currentTap_PH_K = "gdocs";
		$(".spa").load("/project/gdocs_spa"); 
	}
}

function logInsert(map) {
	  axios.post("/kanban/logInsert", map).then((res) => {
	    //console.log(res);
	  });
	}


</script>

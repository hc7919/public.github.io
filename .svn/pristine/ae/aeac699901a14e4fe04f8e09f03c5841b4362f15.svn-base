package kr.or.ddit.controller.security;

import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.collections.map.HashedMap;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.servlet.ModelAndView;

import kr.or.ddit.controller.member.service.IMemberService;
import kr.or.ddit.controller.security.service.ISecurityService;
import kr.or.ddit.vo.LoginLogVO;
import kr.or.ddit.vo.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class SecurityContorller {
	@Inject
	private IMemberService memberService;
	@Inject
	private ISecurityService service;

	@GetMapping("/login")
	public String loginForm() {
		log.debug("로그인 Form::::");

		return "commons/login";
	}

	/**
	 * 로그인 처리 컨트롤러 아이디와 비밀번호가 일치하거나, 아이디와 토큰번호가 일치하다면 로그인처리가 된다. 소셜로그인처리 구상할것 로그인이
	 * 완료되면 내홈으로 간다 . 자동로그인시 로컬에 정보저장 구상 로그인 아이피 기록하기
	 * 
	 * @param memberVO : 로그인 시도한 정보들을 memberVO 객체에 담아 비교한다 . member : DB에서 불러온 회원의
	 *                 정보
	 * @return
	 */
	@PostMapping("/login")
	public ModelAndView login( MemberVO memberVO) throws Exception{
		ModelAndView mav = new ModelAndView();
		log.debug("로그인 :::: {} " , memberVO);
		
		
		HttpServletRequest req = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes())
				.getRequest();
		String ip = req.getHeader("X-FORWARDED-FOR");
		if (ip == null) {
			ip = req.getRemoteAddr();
		}
		// 0:0:0:0:0:0:0:1 == 127.0.0.1 과 같은정보
		log.debug("로그인시도한 ip 정보  : {} ", ip);
		String loginId = memberVO.getMemberId();
		String loginPw = memberVO.getMemberPw();
		String loginToken = memberVO.getMemberToken();
		// 로그인 토큰의경우 소셜을 제외하고는 null이기에 null처리
		if (loginToken == null) {
			loginToken = " ";
		}
		log.debug("받아온 정보 == 로그인아이디 : {} , 비밀번호 : {}", loginId, loginPw);
		log.debug("토큰 : {}", loginToken);

		MemberVO member = memberService.selectOne(memberVO.getMemberId());
		if (member == null) {
			mav.addObject("msg", "아이디 또는 비밀번호가 일치하지 않습니다.");
			mav.setViewName("commons/login");
			// 테스트를 위한 리턴 메인
			return mav;
		}
		String memberId = member.getMemberId();
		String memberPw = member.getMemberPw();
		String memberToken = member.getMemberToken();
		// 토큰의 경우 인증받을시 자동 생성됨. 혹은 소셜로그인시 자동생성됨. 널일경우 체크해줄것

		log.debug("해당아이디 DB정보 == 아이디: {} , 비밀번호: {} ", memberId, memberPw);
		log.debug("토큰 : {}", memberToken);
		
		//로그인 성공 로직
		if (loginId.equals(memberId) && loginPw.equals(memberPw)
				|| loginId.equals(memberId) && loginToken.equals(memberToken)) {
			//로그기록 생성 및 저장
			LoginLogVO loginLogVO = new LoginLogVO();
			loginLogVO.setLoginIp(ip);
			loginLogVO.setMemberId(memberId);
			service.loginLog(loginLogVO);
			
//			mav.addObject("saveLocal", "localStorage.setItem('test', '123')");
			//맴버객체 전송
			mav.addObject("memberInfo", member);
			
			//뷰도메인 
			mav.setViewName("content/dashboard");
			return mav;
		} else

		mav.addObject("msg", "아이디 또는 비밀번호가 일치하지 않습니다.");
		mav.setViewName("commons/login");
		// 테스트를 위한 리턴 메인
		return mav;
	}
	
	//임의 메인페이지 대쉬보드 
	@GetMapping("/dashboard")
	public String mainPage() {
		return "content/dashboard";
	}
	
	//아작스테스트
	@RequestMapping(value = "loginajax", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> ajaxlogin(@RequestBody MemberVO memberVO) {
		log.debug(" 객체들어옴?  : {} {} ",memberVO);
		ModelAndView mav = new ModelAndView();
				mav.addObject("msg", "반환됨?");
		Map<String, Object> map = new HashedMap();
		map.put("msg", "반환됨?");
		
		return map;
	}
	

}

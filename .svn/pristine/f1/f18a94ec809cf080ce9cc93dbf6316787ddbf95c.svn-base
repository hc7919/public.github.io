package kr.or.ddit.controller.topwork.kanban;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.controller.topwork.service.ICalendarService;
import kr.or.ddit.vo.TopWorkCategoryVO;
import kr.or.ddit.vo.TopWorkRelationVO;
import kr.or.ddit.vo.TopWorkVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/kanban")
public class KanbanController {
    
    @Inject
    private ICalendarService calendarService; //이름을 ITopWorkService로 바꿔야함
    
    @GetMapping("/main")
    public String kanbanMain() {
        log.debug("메인");
        
        return "content/kanbanboard";
    }
    
    @PostMapping(value = "/list", produces = "application/json; charset=utf-8")
    @ResponseBody
    public List<TopWorkVO> kanbanList() throws Exception {
        log.debug("리스트");
        List<TopWorkVO> list = calendarService.list();
        
        return list;
    }
    
    @PostMapping(value = "/insert", produces = "text/plain; charset=utf-8")
    @ResponseBody
    public String kanbanInsert(@RequestBody TopWorkVO topWorkVO) throws Exception {
        topWorkVO.setProNo("100");
        log.debug("인서트 들어옴, {}", topWorkVO);
        
        String topWorkNo = calendarService.insert(topWorkVO);
        
        return topWorkNo;
    }
    
    @PostMapping(value = "/categoryList", produces = "application/json; charset=utf-8")
    @ResponseBody
    public List<TopWorkCategoryVO> categoryList() throws Exception{
        List<TopWorkCategoryVO> list = calendarService.categoryList();
        
        return list;
    }
    
    @PostMapping(value = "/categoryInsert", produces = "text/plain; charset=utf-8")
    @ResponseBody
    public String categoryInsert(@RequestBody TopWorkCategoryVO topWorkCategoryVO) throws Exception {
        log.debug("카테고리 VO : {}", topWorkCategoryVO);
        calendarService.categoryInsert(topWorkCategoryVO);
        
        return "카테고리인서트";
    }
    
    @PostMapping(value = "/categoryDelete", produces = "text/plain; charset=utf-8")
    @ResponseBody
    public String categoryDelete(@RequestBody TopWorkCategoryVO topWorkCategoryVO) throws Exception{
        log.debug("카테고리 VO : {}", topWorkCategoryVO);
        calendarService.categoryDelete(topWorkCategoryVO);
        
        return "카테고리딜리트~";
    }
    
    @PostMapping(value = "/topWorkMove", produces = "text/plain; charset=utf-8")
    @ResponseBody
    public String topWorkMove(@RequestBody TopWorkVO topWorkVO) throws Exception {
        log.debug("전송된 객체 : {}", topWorkVO);
        calendarService.topWorkMove(topWorkVO);
        
        return "success";
    }
    
    @PostMapping(value = "/logInsert", produces = "text/plain; charset=utf-8")
    @ResponseBody
    public String logInsert(@RequestBody Map<String, String> map) throws Exception {
        log.debug("전송된 맵 : {}", map);
        calendarService.logInsert(map);
        
        return "로그 인서트 성공";
    }
    
    @PostMapping(value = "/categoryUpdate", produces = "text/plain; charset=utf-8")
    @ResponseBody
    public String categoryUpdate(@RequestBody TopWorkCategoryVO topWorkCategoryVO) throws Exception {
        log.debug("topWorkCategoryVO : {}", topWorkCategoryVO);
        calendarService.categoryUpdate(topWorkCategoryVO);
        
        return "카테고리 업데이트 성공";
    }
    
    @PostMapping(value = "/topWorkDetail", produces = "application/json; charset=utf-8")
    @ResponseBody
    public TopWorkVO topWorkDetail(@RequestBody TopWorkVO topWorkVO) throws Exception {
        log.debug("디테일할 객체 : {}", topWorkVO);
        TopWorkVO vo = calendarService.select(topWorkVO);
        
        return vo;
    }
    
    @PostMapping(value = "/topWorkUpdate", produces = "text/plain; charset=utf-8")
    @ResponseBody
    public String topWorkUpdate(@RequestBody TopWorkVO topWorkVO) throws Exception {
        log.debug("업데이트하러 온 객체 : {}", topWorkVO);
        calendarService.topWorkUpdate(topWorkVO);
        
        return "디테일 업데이트 성공";
    }
    
    @PostMapping(value = "/topWorkDelete", produces = "text/plain; charset=utf-8")
    @ResponseBody
    public String topWorkDelete(@RequestBody TopWorkVO topWorkVO) throws Exception {
        log.debug("딜리트하러 온 객체 : {}", topWorkVO);
        calendarService.topWorkDelete(topWorkVO);
        
        return "디테일 삭제 성공";
    }
    
    @PostMapping(value = "/topWorkRelationInsert", produces = "text/plain; charset=utf-8")
    @ResponseBody
    public String topWorkRelationInsert(@RequestBody TopWorkRelationVO topWorkRelationVO) {
        log.debug("관계 왔다 : {}", topWorkRelationVO);
        
        return "관계 설정 완료";
    }
}

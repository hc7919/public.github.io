<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<!-- jquery -->
<script src="https://code.jquery.com/jquery-3.6.3.js" integrity="sha256-nQLuAZGRRcILA+6dMBOvcRh5Pe310sBpanc6+QBmyVM=" crossorigin="anonymous"></script>

</head>
<body>
<h1>api test</h1>
    <p>Sheets API </p>
	
    <!--Add buttons to initiate auth sequence and sign out-->
    <button id="authorize_button" onclick="handleAuthClick()">구글인증</button>
    <button id="signout_button" onclick="handleSignoutClick()">로그아웃</button>
    
    <!-- create (projectName) 파라미터 프로젝트이름으로 새로생성-->
    <button onclick="create('새로운 타이틀(프로젝트명)')">문서생성</button>
    
    sheetId: <input type="text" id="sheetId" value="" readonly>
	
	<!-- 출력할 곳  -->
    <pre id="content" style="white-space: pre-wrap;"></pre>
		
		
<script type="text/javascript">
      const CLIENT_ID = '616281354554-lpmgnp2gmkaalfk8th0kbj77p0m720jg.apps.googleusercontent.com';
      const API_KEY = 'AIzaSyABuxJp6UPLwsSvSlF9lLHChKCB40EyRK0';

      const DISCOVERY_DOC = 'https://sheets.googleapis.com/$discovery/rest?version=v4';

      const SCOPES = 'https://www.googleapis.com/auth/spreadsheets';
		
      let tokenClient;
      let gapiInited = false;
      let gisInited = false;

      
      /**
       * Callback after api.js is loaded.
       */
      function gapiLoaded() {
        gapi.load('client', initializeGapiClient);
      }

      /**
       * Callback after the API client is loaded. Loads the
       * discovery doc to initialize the API.
       */
      async function initializeGapiClient() {
        await gapi.client.init({
          apiKey: API_KEY,
          discoveryDocs: [DISCOVERY_DOC],
        });
        gapiInited = true;
      }

      /**
       * Callback after Google Identity Services are loaded.
       */
      
  	 function gisLoaded() {
        tokenClient = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID,
          scope: SCOPES,
          callback: '', // defined later
        });
        gisInited = true;
      }
 	  //새로운문서 만들기 프로젝트이름으로 만들어서 계속 뿌려줄것 
      function create(title) {
    	  return new Promise(function(resolve,reject){
    		  try {
    	    	    gapi.client.sheets.spreadsheets.create({
    	    	      properties: {
    	    	        title: title,
    	    	      },
    	    	    }).then((response) => {
    	    	    	//여기서 생성된 시트아이디를 db에 저장한후 불러오기 할거 
    	    	    ///////////////////////////////////////////////////요 sheetId 생성한걸로 이용
    	    	    	var sheetId = response.result.spreadsheetId;
					///////////////////////////////////////////////////////		
    	    	      console.log('Spreadsheet ID: ' + response.result.spreadsheetId);
    	    	  //문서 새로 생성되면 바로 찍어주기 테스트
//     	    	  document.getElementById('content').innerHTML = ` <iframe style= "border:none; width:100%; height:800px; "src="https://docs.google.com/spreadsheets/d/\${sheetId}/edit#gid=0"></iframe>`;
    	    	      document.getElementById('sheetId').value = sheetId; 
    	    	    
    	    	    });
    	    	  } catch (err) {
    	    	    document.getElementById('content').innerText = err.message;
    	    	    return;
    	    	  }
    	  });//promise
    	}//create 새문서
    	
    	//크로스오리진을 우회하기 위한 비동기 데이터처리 
    	$.ajax({
				type: "post",
				url: "${webPath}/gdocsSheet",
				data: sheetId,
				contentType : 'application/json',
				success : (res) => {
					console.log(res)
				}
					
    	})		
    	
    	
      /**
       *  Sign in the user upon button click.
       */
       window.onload=   function handleAuthClick() {
        tokenClient.callback = async (resp) => {
          if (resp.error !== undefined) {
            throw (resp);
          }
          document.getElementById('signout_button').style.visibility = 'visible';
          document.getElementById('authorize_button').innerText = 'Refresh';
          //인증 동시에 새로운문서 만들기
          await create("프로젝트명 새로운문서 ")
          
        };

        if (gapi.client.getToken() === null) {
          // Prompt the user to select a Google Account and ask for consent to share their data
          // when establishing a new session.
          tokenClient.requestAccessToken({prompt: 'consent'});
        } else {
          // Skip display of account chooser and consent dialog for an existing session.
          tokenClient.requestAccessToken({prompt: ''});
        }
      }


      
      

</script>


  <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
    <script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>
    </body>
</html>
package kr.or.ddit.controller.topwork.service;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import kr.or.ddit.mapper.CalendarMapper;
import kr.or.ddit.vo.DragTestVO;
import kr.or.ddit.vo.ProjectLogVO;
import kr.or.ddit.vo.TopWorkCategoryVO;
import kr.or.ddit.vo.TopWorkVO;
import lombok.extern.slf4j.Slf4j;


@Service
@Slf4j
public class CalendarServiceImpl implements ICalendarService {
    @Inject
    private CalendarMapper mapper;
    
    @Override
    public List<TopWorkVO> list() throws Exception {
        return mapper.list();
    }

    @Override
    public void insert(TopWorkVO topWorkVO) throws Exception {
        if (topWorkVO.getTopWorkFile() == null) {
            topWorkVO.setTopWorkFile("0");
        }
        
        mapper.insert(topWorkVO);//인서트 이후 topWorkNo가 추가되어있음.
        log.debug("topWorkVO 상태: {}", topWorkVO);
        
        mapper.insertRelation(topWorkVO);
    }

    @Override
    public void updateMove(TopWorkVO topWorkVO) throws Exception {
        mapper.updateMove(topWorkVO);
    }

    @Override
    public void update(TopWorkVO topWorkVO) throws Exception {
        mapper.update(topWorkVO);
    }

    @Override
    public void delete(TopWorkVO topWorkVO) throws Exception {
        mapper.delete(topWorkVO);
    }

    @Override
    public List<TopWorkCategoryVO> categoryList() throws Exception {
        return mapper.categoryList();
    }

    @Override
    public void categoryInsert(TopWorkCategoryVO topWorkCategoryVO) throws Exception {
        mapper.categoryInsert(topWorkCategoryVO);
    }

    @Override
    public void categoryDelete(TopWorkCategoryVO topWorkCategoryVO) throws Exception {
        //카테고리 삭제 전에 해당 카테고리에 있는 작업들 위치 변경해줘야함.
        List<TopWorkVO> topWorkList = mapper.selectTopWork(topWorkCategoryVO.getTwCategoryNo());
        
        //삭제할 카테고리에 일감 리스트가 있으면 Wating으로 이동시켜준다.
        if (topWorkList.size() > 0) {
            for (TopWorkVO item : topWorkList) {
                mapper.topWorkWaiting(item);
                
                //이동 후 로그 기록
                String proLogContent = "작업이 " + item.getTwCategoryNo() + "에서 "
                                     + "1으로 이동됨";
                ProjectLogVO projectLogVO = new ProjectLogVO();
                projectLogVO.setProNo(item.getProNo());
                projectLogVO.setProLogContent(proLogContent);
                projectLogVO.setTopWorkNo(item.getTopWorkNo());
                log.debug("projectLogVO : {}", projectLogVO);
                
                mapper.logInsert(projectLogVO);
            }
        }
        
        mapper.categoryDelete(topWorkCategoryVO);
    }

    @Override
    public void topWorkMove(TopWorkVO topWorkVO) throws Exception {
        mapper.topWorkMove(topWorkVO);
    }

    @Override
    public void logInsert(Map<String, String> map) throws Exception {
        String topWorkNo = map.get("topWorkNo");
        String proLogContent = "작업이 " + map.get("beforeTwCategoryNo") + "에서 "
                             + map.get("twCategoryNo") + "으로 이동됨.";
        
        //필요한건 프로젝트 번호
        TopWorkVO topWorkVO = (TopWorkVO) mapper.select(topWorkNo);
        
        ProjectLogVO projectLogVO = new ProjectLogVO();
        projectLogVO.setProNo(topWorkVO.getProNo());
        projectLogVO.setProLogContent(proLogContent);
        projectLogVO.setTopWorkNo(topWorkNo);
        log.debug("인서트될 로그 : {}", projectLogVO);
        
        mapper.logInsert(projectLogVO);
    }

}

package kr.or.ddit.controller.upload;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.vo.FileTreeVO;
import kr.or.ddit.vo.FileVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.ProjectVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/data")
public class MyDataRoomController {
	
	@Autowired
	IFileTreeService fileTreeService;
	
	@Autowired
	IUploadService uploadService;
	
	
	/**
	 * SSY 내 자료실
	 *     - 내 자료실 홈
	 * @return
	 */
	@GetMapping("/myDataMain")
	public String myDataList() {
		return "content/myDataRoom";
	}
	
	
	/**
	 * SSY 내 자료실
	 *     - 트리 형태로 출력할 데이터 정제하기
	 * @param proNo
	 * @param fileTreeVO
	 * @return 
	 * @throws Exception 
	 */
	@PostMapping(value = "/myDataRoom", produces = "application/json; charset=UTF-8")
	@ResponseBody
	public List<FileTreeVO> myFileTree(@RequestParam("memberId") String memberId, 
																 FileTreeVO fileTreeVO, 
																 FileVO fileVO, 
																 MemberVO memberVO, 
																 ProjectVO projectVO
	) throws Exception {
		
		// MEMBER_ID 가져오깅
		log.debug("memberId : {}", memberId);
		projectVO.setMemberId(memberId);
		
		// MEMBER_NAME 가져와서 MemberVO에 담깅
		String memberName = fileTreeService.getMemberName(memberId);
		log.debug("memberName : {}", memberName);
		memberVO.setMemberName(memberName);
		
		// PROJECT_JOIN_STATE 테이블에서 MEMBER_ID로 PRONO 가져와서 Map에 담깅
		// key = proNo , value = memberId
		List<ProjectVO> proNoList = fileTreeService.getProNo(memberId);
		log.debug("proNoList : {}", proNoList.toString());
		
		// FileTreeVO에 proNo로 가져온 데이터 담아서 myFileTreeList에 한 줄씩 넣깅
		String proNo = "";
		for (ProjectVO p : proNoList) {
			// FileTreeVO에 proNo 하나 뽑아서 담깅
			proNo = p.getProNo();
			log.debug("proNo : {}", proNo);
			fileTreeVO.setProNo(proNo);
			projectVO.setProNo(proNo);
			
			// FILE_TREE 테이블에서 proNo에 해당하는 데이터 삭제하깅
			fileTreeService.delData(proNo);
			
			// proNo로 프로젝트 이름 가져오깅
			String proName = uploadService.getProName(proNo);
			log.debug("proName : {}", proName);
			
			// proNo로 해당하는 데이터 리스트 가져오깅(현재 size = 0)
			List<FileTreeVO> myDataList =  fileTreeService.dataList(proNo);
			log.debug("myDataList - 현재 size = 0 : {}", myDataList.toString());
			
			// 최상위루트 넣어주깅 (삽입 후 size = 1)
			fileTreeVO.setProNo(proNo);
			fileTreeVO.setFileId(proNo);
			fileTreeVO.setParentId("#");
			fileTreeVO.setDepth(0);
			fileTreeVO.setFileName(proName);
			myDataList.add(fileTreeVO);
			uploadService.insertRow(fileTreeVO);
			log.debug("myDataList - 최상위루트 삽입 후 : {}", myDataList.toString());
			
			// FILE_TREE 테이블에 데이터가 있는지 여부 확인
			if(myDataList.size() > 1) { // 있으면
				return new ArrayList<FileTreeVO>(myDataList);
			}else{	// 없으면
				// proNo로 FILE_PATH 가져오깅
				List<FileVO> filePathList = fileTreeService.getMyFilePath(projectVO);
				
				// FILE_PATH에서 카테고리 이름과 상위작업 이름 가져오깅
				int cnt = 0;
				String[] seperator;
				String cateName = "";
				String twName = "";
				for (FileVO f : filePathList) {
					seperator = f.getFilePath().split("\\\\");
					cateName = seperator[1];	// 카테고리 이름
					twName = seperator[2];		// 상위작업 이름
					
					if(cnt == 0) {	// cnt == 0이면 일단 카테고리 하나 넣깅
						// 카테고리 담깅 - fileId, fileName
						fileTreeVO.setParentId(proNo);		// parentId : 프로젝트 넘버
						fileTreeVO.setFileId(cateName);		// fileId : 카테고리 이름
						fileTreeVO.setFileName(cateName);	// fileName : 카테고리 이름
						fileTreeVO.setDepth(1);				// depth : 1로 고정
						fileTreeVO.setProNo(proNo);			// proNo : 프로젝트 넘버
						myDataList.add(fileTreeVO);
						uploadService.insertRow(fileTreeVO);
						log.debug("myDataList - 카테고리명 삽입 후 : {}", myDataList.toString());
						
						// 카테고리명 중복 확인
						// 아래 if 조건문 or proNo랑 depth랑 fileId가 일치하는 거 불러와서 그거랑 비교할까? 일단 쿼리는 만들어 놓음ㅇㅇ
						if(fileTreeVO.getFileId().equals(cateName)) {	// 방금 넣은 fileId랑 cateName이랑 같으면 중복이니까
							// 상위작업 담깅
							fileTreeVO.setParentId(cateName);	// parentId : 카테고리 이름
							fileTreeVO.setFileId(twName);		// fileId : 상위작업 이름
							fileTreeVO.setFileName(twName);		// fileName : 상위작업 이름
							fileTreeVO.setDepth(2);				// depth : 2로 고정
							fileTreeVO.setProNo(proNo);			// proNo : 프로젝트 넘버
							myDataList.add(fileTreeVO);
							uploadService.insertRow(fileTreeVO);
							log.debug("myDataList - 상위작업명 삽입 후 : {}", myDataList.toString());
							cnt++;
							continue;
						}
						cnt++;
						
					}else {	// cnt == 0이 아닐 때 (최소 2회차)
						// 카테고리명 중복 확인
						if(!fileTreeVO.getParentId().equals(cateName)) {	// 카테고리명 중복 아닐 때 카테고리명 넣어주깅
							fileTreeVO.setParentId(proNo);		// parentId : 프로젝트 넘버
							fileTreeVO.setFileId(cateName);		// fileId : 카테고리 이름
							fileTreeVO.setFileName(cateName);	// fileName : 카테고리 이름
							fileTreeVO.setDepth(1);				// depth : 1로 고정
							fileTreeVO.setProNo(proNo);			// proNo : 프로젝트 넘버
							myDataList.add(fileTreeVO);
							uploadService.insertRow(fileTreeVO);
							log.debug("myDataList - 카테고리명 삽입 후 : {}", myDataList.toString());
							
							// 카테고리명 중복 확인
							// 아래 if 조건문 or proNo랑 depth랑 fileId가 일치하는 거 불러와서 그거랑 비교할까? 일단 쿼리는 만들어 놓음ㅇㅇ
							if(fileTreeVO.getFileId().equals(cateName)) {	// 방금 넣은 fileId랑 cateName이랑 같으면 중복이니까
								// 상위작업 담깅
								fileTreeVO.setParentId(cateName);	// parentId : 카테고리 이름
								fileTreeVO.setFileId(twName);		// fileId : 상위작업 이름
								fileTreeVO.setFileName(twName);		// fileName : 상위작업 이름
								fileTreeVO.setDepth(2);				// depth : 2로 고정
								fileTreeVO.setProNo(proNo);			// proNo : 프로젝트 넘버
								myDataList.add(fileTreeVO);
								uploadService.insertRow(fileTreeVO);
								log.debug("myDataList - 상위작업명 삽입 후 : {}", myDataList.toString());
								continue;
							}
						}else{	// 카테고리명 중복일 때는 상위작업명 넣어주깅
							// 상위작업명 중복 확인
							if(fileTreeVO.getFileId().equals(twName)) {	// 방금 넣은 fildId랑 twName이랑 같으면 중복이니까~
								continue;
							}else {	// 방금 넣은 fileId랑 twName이랑 다르면 중복이 아니니까~~
								// 상위작업 담깅
								fileTreeVO.setParentId(cateName);	// parentId : 카테고리 이름
								fileTreeVO.setFileId(twName);		// fileId : 상위작업 이름
								fileTreeVO.setFileName(twName);		// fileName : 상위작업 이름
								fileTreeVO.setDepth(2);				// depth : 2로 고정
								fileTreeVO.setProNo(proNo);			// proNo : 프로젝트 넘버
								myDataList.add(fileTreeVO);
								uploadService.insertRow(fileTreeVO);
								log.debug("myDataList - 상위작업명 삽입 후 : {}", myDataList.toString());
							}
							continue;
						}
					}
				}	// end of fore f
			}

		}	// end of fore key
		// FILE_TREE테이블에서 proNo에 해당하는 최종 데이터를 리스트로 가져오기
		List<FileTreeVO> myfinalDataList = fileTreeService.myFinalDataList(memberId);

		return new ArrayList<FileTreeVO>(myfinalDataList);
	}
	
	@PostMapping(value = "/myGallary", produces = "application/json; charset=UTF-8")
	@ResponseBody
	public List<FileTreeVO> myGallary(@RequestParam("name") String fileName,
									  @RequestParam("depth") int depth,
									  @RequestParam("parentId") String parentId,
									  @RequestParam("proNo") String proNo
	) throws Exception {
		
		Map<String, Object> fileInfoMap = new HashMap<String, Object>();
		fileInfoMap.put("fileName", fileName);
		fileInfoMap.put("depth", depth);
		fileInfoMap.put("parentId", parentId);
		fileInfoMap.put("proNo", proNo);
		log.debug("fileInfoMap : {}", fileInfoMap.toString());
		
		List<FileVO> list = uploadService.getRealName(fileInfoMap);
		log.debug("getRealName_list : {}", list.toString());
		
		String[] seperator;
		String realName = "";
		String sliced = "";
		int index;
		String isImage = "";

		
		
	
		
		
		return new ArrayList<FileTreeVO>();
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}

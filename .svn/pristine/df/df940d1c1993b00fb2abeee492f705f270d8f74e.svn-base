<%@ page language="java" contentType="text/html; charset=UTF-8"%>
<br>
<h1>공유문서다!!!!! </h1>

   <head>
    <meta charset="utf-8" />
    <style type="text/css">
    body {
	width: 100%;
	height: 100%;
	},
	iframe{
	width: 100%;
	height: 1200px;
	border: none;
	}
    #isheet{
    width: 100%;
	height: 1200px;
	border: none;
    }
    </style>
  </head>
  <body>
    <p>Sheets API </p>
	
    <!--Add buttons to initiate auth sequence and sign out-->
    <button id="authorize_button" onclick="handleAuthClick()">구글인증</button>
    <button id="signout_button" onclick="handleSignoutClick()">로그아웃</button>
    
    <!-- create (projectName) 파라미터 프로젝트이름으로 새로생성-->
    <button onclick="create('새로운 타이틀(프로젝트명)')">문서생성 버튼은 프로젝트 생성하기 완료시 크리에이트해야할듯</button>
	
	<!-- 출력할 곳  -->
    <pre id="content" style="white-space: pre-wrap;"></pre>
		
	<iframe id = "isheet" style = "border:none;" src="https://docs.google.com/spreadsheets/d/1UkeqvYkPj3jVAoi23D97zWNV8UL2xdVlKvRwijuOhNU/edit#gid=0"></iframe>	
		
    <script type="text/javascript">
      var CLIENT_ID = '616281354554-lpmgnp2gmkaalfk8th0kbj77p0m720jg.apps.googleusercontent.com';
      var API_KEY = 'AIzaSyABuxJp6UPLwsSvSlF9lLHChKCB40EyRK0';

      var DISCOVERY_DOC = 'https://sheets.googleapis.com/$discovery/rest?version=v4';

      var SCOPES = 'https://www.googleapis.com/auth/spreadsheets';

      let tokenClient;
      let gapiInited = false;
      let gisInited = false;

      document.getElementById('authorize_button').style.visibility = 'hidden';
      document.getElementById('signout_button').style.visibility = 'hidden';
		
      //새로운문서 만들기 프로젝트이름으로 만들어서 계속 뿌려줄것 
      function create(title) {
    	  try {
    	    gapi.client.sheets.spreadsheets.create({
    	      properties: {
    	        title: title,
    	      },
    	    }).then((response) => {
    	    	//여기서 생성된 시트아이디를 db에 저장한후 불러오기 할거 
    	    	var sheetId = response.result.spreadsheetId;
    	      console.log('Spreadsheet ID: ' + response.result.spreadsheetId);
    	  document.getElementById('content').innerHTML = ` <iframe src="https://docs.google.com/spreadsheets/d/\${sheetId}/edit#gid=0"></iframe>`;
    	      alert('Spreadsheet ID: ' + response.result.spreadsheetId);
    	    });
    	  } catch (err) {
    	    document.getElementById('content').innerText = err.message;
    	    return;
    	  }
    	  
    	}
      
      
      /**
       * Callback after api.js is loaded.
       */
      function gapiLoaded() {
        gapi.load('client', initializeGapiClient);
      }

      /**
       * Callback after the API client is loaded. Loads the
       * discovery doc to initialize the API.
       */
      async function initializeGapiClient() {
        await gapi.client.init({
          apiKey: API_KEY,
          discoveryDocs: [DISCOVERY_DOC],
        });
        gapiInited = true;
        maybeEnableButtons();
      }

      /**
       * Callback after Google Identity Services are loaded.
       */
      function gisLoaded() {
        tokenClient = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID,
          scope: SCOPES,
          callback: '', // defined later
        });
        gisInited = true;
        maybeEnableButtons();
      }

      /**
       * Enables user interaction after all libraries are loaded.
       */
      function maybeEnableButtons() {
        if (gapiInited && gisInited) {
          document.getElementById('authorize_button').style.visibility = 'visible';
        }
      }

      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick() {
        tokenClient.callback = async (resp) => {
          if (resp.error !== undefined) {
            throw (resp);
          }
          document.getElementById('signout_button').style.visibility = 'visible';
          document.getElementById('authorize_button').innerText = 'Refresh';
          await listMajors();
        };

        if (gapi.client.getToken() === null) {
          // Prompt the user to select a Google Account and ask for consent to share their data
          // when establishing a new session.
          tokenClient.requestAccessToken({prompt: 'consent'});
        } else {
          // Skip display of account chooser and consent dialog for an existing session.
          tokenClient.requestAccessToken({prompt: ''});
        }
      }

      /**
       *  Sign out the user upon button click.
       */
      function handleSignoutClick() {
        var token = gapi.client.getToken();
        if (token !== null) {
          google.accounts.oauth2.revoke(token.access_token);
          gapi.client.setToken('');
          document.getElementById('content').innerText = '';
          document.getElementById('authorize_button').innerText = 'Authorize';
          document.getElementById('signout_button').style.visibility = 'hidden';
        }
      }
    </script>
    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
    <script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>
  </body>